#                                    Задача "За честь и отвагу!":
#  Создайте класс Knight, наследованный от Thread, объекты которого будут обладать следующими свойствами:
#  Атрибут name - имя рыцаря. (str)
#  Атрибут power - сила рыцаря. (int)
#  А также метод run, в котором рыцарь будет сражаться с врагами:
#  При запуске потока должна выводится надпись "<Имя рыцаря>, на нас напали!".
#  Рыцарь сражается до тех пор, пока не повергнет всех врагов (у всех потоков их 100).
#  В процессе сражения количество врагов уменьшается на power текущего рыцаря.
#  По прошествию 1 дня сражения (1 секунды) выводится строка "<Имя рыцаря> сражается <кол-во дней>..., осталось <кол-во воинов> воинов."
#  После победы над всеми врагами выводится надпись "<Имя рыцаря> одержал победу спустя <кол-во дней> дней(дня)!"


from threading import Thread   # это команда для импорта класса Thread из модуля threading
from time import sleep


class Knight(Thread):             #Создайте класс Knight, наследованный от Thread
    def __init__(self, name, power):   # атрибуты класса - (name) - имя рыцаря, (power) - сила рыцаря
        Thread.__init__(self)
        self.name = name
        self.power = power
       # метод run, в котором рыцарь будет сражаться с врагами:
    def run(self):
        print(f'{self.name}, на нас напали! ') #  При запуске потока должна выводится надпись "<Имя рыцаря>, на нас напали!"
        enemies = 100   # враги их 100 по заданию
        days = 0
        while enemies > 0:
            sleep(1)  # функцию sleep надо искать в библиотеке time
            days += 1
            enemies -= self.power
            print(f'{self.name} сражается {days}..., осталось {enemies} воинов')
        print(f"{self.name} одержал победу спустя{days} дней(дня)!")


first_knight = Knight('Sir Lancelot', 10)
second_knight = Knight("Sir Galahad", 20)

first_knight.start()
second_knight.start()

first_knight.join()
second_knight.join()

